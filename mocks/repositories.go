// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/wordpress-simple-backup/internal/core (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mocks_core -destination mocks/repositories.go github.com/thomas-marquis/wordpress-simple-backup/internal/core Repository
//

// Package mocks_core is a generated GoMock package.
package mocks_core

import (
	reflect "reflect"

	core "github.com/thomas-marquis/wordpress-simple-backup/internal/core"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ClearDump mocks base method.
func (m *MockRepository) ClearDump(arg0 core.DumpFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDump", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDump indicates an expected call of ClearDump.
func (mr *MockRepositoryMockRecorder) ClearDump(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDump", reflect.TypeOf((*MockRepository)(nil).ClearDump), arg0)
}

// CreateContentDump mocks base method.
func (m *MockRepository) CreateContentDump() (core.DumpFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContentDump")
	ret0, _ := ret[0].(core.DumpFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContentDump indicates an expected call of CreateContentDump.
func (mr *MockRepositoryMockRecorder) CreateContentDump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContentDump", reflect.TypeOf((*MockRepository)(nil).CreateContentDump))
}

// CreateDbDump mocks base method.
func (m *MockRepository) CreateDbDump() (core.DumpFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDbDump")
	ret0, _ := ret[0].(core.DumpFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDbDump indicates an expected call of CreateDbDump.
func (mr *MockRepositoryMockRecorder) CreateDbDump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDbDump", reflect.TypeOf((*MockRepository)(nil).CreateDbDump))
}

// ListVersions mocks base method.
func (m *MockRepository) ListVersions() ([]*core.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions")
	ret0, _ := ret[0].([]*core.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockRepositoryMockRecorder) ListVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockRepository)(nil).ListVersions))
}

// RemoveVersion mocks base method.
func (m *MockRepository) RemoveVersion(arg0 core.VersionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVersion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVersion indicates an expected call of RemoveVersion.
func (mr *MockRepositoryMockRecorder) RemoveVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVersion", reflect.TypeOf((*MockRepository)(nil).RemoveVersion), arg0)
}

// SaveVersion mocks base method.
func (m *MockRepository) SaveVersion(arg0 *core.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVersion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVersion indicates an expected call of SaveVersion.
func (mr *MockRepositoryMockRecorder) SaveVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVersion", reflect.TypeOf((*MockRepository)(nil).SaveVersion), arg0)
}
