// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thomas-marquis/wordpress-simple-backup/internal/core (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mocks_core -destination mocks/repositories.go github.com/thomas-marquis/wordpress-simple-backup/internal/core Repository
//

// Package mocks_core is a generated GoMock package.
package mocks_core

import (
	reflect "reflect"

	core "github.com/thomas-marquis/wordpress-simple-backup/internal/core"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNewBackupVersion mocks base method.
func (m *MockRepository) CreateNewBackupVersion(arg0 string) (*core.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBackupVersion", arg0)
	ret0, _ := ret[0].(*core.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewBackupVersion indicates an expected call of CreateNewBackupVersion.
func (mr *MockRepositoryMockRecorder) CreateNewBackupVersion(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBackupVersion", reflect.TypeOf((*MockRepository)(nil).CreateNewBackupVersion), arg0)
}

// GetExistingBackup mocks base method.
func (m *MockRepository) GetExistingBackup(arg0 string) (*core.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingBackup", arg0)
	ret0, _ := ret[0].(*core.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingBackup indicates an expected call of GetExistingBackup.
func (mr *MockRepositoryMockRecorder) GetExistingBackup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingBackup", reflect.TypeOf((*MockRepository)(nil).GetExistingBackup), arg0)
}

// RestoreToVersion mocks base method.
func (m *MockRepository) RestoreToVersion(arg0 *core.Backup, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreToVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreToVersion indicates an expected call of RestoreToVersion.
func (mr *MockRepositoryMockRecorder) RestoreToVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreToVersion", reflect.TypeOf((*MockRepository)(nil).RestoreToVersion), arg0, arg1)
}

// SaveBackup mocks base method.
func (m *MockRepository) SaveBackup(arg0 *core.Backup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBackup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBackup indicates an expected call of SaveBackup.
func (mr *MockRepositoryMockRecorder) SaveBackup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBackup", reflect.TypeOf((*MockRepository)(nil).SaveBackup), arg0)
}
